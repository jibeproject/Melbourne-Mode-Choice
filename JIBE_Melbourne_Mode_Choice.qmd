---
title: "JIBE Melbourne Mode Choice Preparation and Analysis"
format: gfm
execute:
  # no data is to be included in this document, unless intentionally over-ridden
  output: false 
knitr:
  opts_chunk: 
    collapse: true
---

## Background

To conduct the JIBE mode choice modelling for Melbourne requires data preparation using travel survey data. The analysis draws on the [Victorian Integrated Survey of Travel and Activity](https://www.vic.gov.au/victorian-integrated-survey-travel-and-activity) (VISTA[^1]) for 2012-20, used with permission from the Victorian Department of Transport.

The analysis is conducted for the JIBE project by Carl Higgs (VISTA data preparation) and Mahsa Abdollahyar (travel time estimation) in August/September 2024, in coordination with Dr Qin Zhang, Corin Staves and Dr Belen Zapata-Diomedi.

It expands on an [earlier mode choice analysis](https://github.com/carlhiggs/multimodal_analysis_example) demonstration using the VISTA travel survey using the [Rapid Realisting Routing with R5 (r5r)](https://ipeagit.github.io/r5r/) routing engine, conducted by Carl Higgs for the JIBE project in March 2022 on behalf of Dr Tayebeh Saghapour.  This was subsequently [adapted](https://github.com/jibeproject/odCalculationsMelbourne) by Dr Alan Both for the JIBE project in February 2024.

The purpose of this analysis is to create appropriate data to inform travel demand generation using the [Microscopic Transport Orchestrator (MITO)](https://www.mos.ed.tum.de/tb/forschung/models/travel-demand/mito/) model by Dr Qin Zhang, [transport simulation modelling](https://github.com/jibeproject/matsim-jibe) by Corin Staves, and [microsimulation of downstream health impacts](https://github.com/jibeproject/health_microsim) related to mode choice and environmental exposures by Dr Belen Zapata-Diomedi, Dr Ali Abbas and Steve Pemberton.

A Quarto markdown document [`JIBE_Melbourne_Mode_Choice.qmd`](JIBE_Melbourne_Mode_Choice.qmd) will be used to document the analysis and updated as the project progresses.  This shall also be rendered as a GitHub-Flavoured-Markdown document [`JIBE_Melbourne_Mode_Choice.md`](JIBE_Melbourne_Mode_Choice.md) for convenient online viewing.

Code (at least at first) will draw on example code prepared by Dr Qin Zhang and Corin Staves, adapting as required for use with the VISTA travel survey.

No data or data-related outputs will be included in this document or repository.  By default, output is set to False.  For non-sensitive aspects, e.g. displaying the `sessionInfo()` after running analysis, this may be over-ridden.

## Status
27 August 2024: commenced, in progress

## System environment set up

```{r}
rm(list = ls()) # clear memory
```

Project dependencies are describe in the [`renv.lock`](./renv.lock) file; see [renv](https://rstudio.github.io/renv/) for more information.  Instructions on installing dependencies using an `renv` lock file are [here](https://rstudio.github.io/renv/articles/renv.html#installing-packages).

```{r}
library(conflicted) # package conflict handling https://stackoverflow.com/a/75058976
library(janitor) # data cleaning
library(knitr) # presentation
library(tidyverse) # data handling
library(fastDummies) # binary dummy variable utility

conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
```

## Classification of trips

Trips will be classified using a standard abbreviation schema, as advised by Dr Qin Zhang and Corin Staves [^2] [^3] [^4]

| Classification | Description |
|:---------------|:------------|
| HBW            | Home based work |
| HBE            | Home based education |
| HBA            | Home based accompanying/escort trip |
| HBS            | Home based shopping |
| HBR            | Home based recreational |
| HBO            | Home based other (e.g. health care, religious activity, visit friend/family) |
| NHBW           | Non-home based work (e.g. from workplace to restaurant) |
| NHBO           | Non-home based other (e.g. from supermarket to restaurant) |
| RRT            | Recreational Round Trip |

## Data preparation
### Read data
```{r}
data <- c(
  'H_VISTA_1220_Coord.csv',
  'JTE_VISTA_1220_Coord.csv',
  'JTW_VISTA_1220_Coord.csv',
  'P_VISTA_1220_Coord.csv',
  'S_VISTA_1220_Coord.csv',
  'T_VISTA_1220_Coord.csv'
)
survey<-list()
for (d in data) {
  survey[[sapply(strsplit(d,split='_',1),`[`,1)]]<-read_csv(glue::glue('../../{d}')) 
}
survey
```

### Check data, ensuring that dataset IDs are unique
```{r}
# Person identifier must uniquely identify persons (it does; there are 82,118 unique persons)
table(duplicated(survey$P$persid))
stopifnot(!any(duplicated(survey$P$persid)))

# Trip identifier must uniquely identify trips (it does not)
table(duplicated(survey$T$tripid))

# Look at duplicate tripids (4,104 are NA)
survey$T[duplicated(survey$T$tripid),]

# I visually checked the CSV file and confirmed that these rows just consist of commas
# This can occur if someone exports a CSV from Excel that inadvertently includes blank rows
# I am surprised that the read csv default 'skip_empty_rows = TRUE' did not deal with this.

# Omit NA tripid rows from tripid dataset
survey$T <- survey$T %>% filter(!sapply(tripid, is.na))

# Trip id must be unique  (now, it is; there are 221,819 unique trips)
stopifnot(!any(duplicated(survey$T$tripid)))

# Household ID must uniquely identify households (it does; there are 32,133 households)
table(duplicated(survey$H$hhid))
stopifnot(!any(duplicated(survey$H$hhid)))
```

### Merge data on trips, persons and households
Left joining households to persons, and left joining that to the trip dataset so we have trips>persons>households, respectively joined using their unique identifiers.

```{r}
trips <- survey$T %>% left_join(survey$P  %>% left_join(survey$H, by='hhid'), by='persid')
```

### List columns present in the merged Trip dataset

```{r}
#| output: true
trips %>% colnames()
```

## Assign trip purpose

### Review trip variables relevant to trip purpose
The example TRADS analysis conducted by Dr Qin Zhang (not included in this repo) derived trip purpose through classification of origin and destination categories.

The VISTA Trips dataset variables (see [dictionary](./dictionaries/T_VISTA_1220%20_data_dictionary_machine_readable.csv)) has this information in the `origplace1` ('Origin Place Type (Summary)') and `destplace1` ('Destination Place Type (Summary)') variables.  The variables `origplace2` and `destplace2` contain more detail if this is required for any downstream analyses.

```{r} 
#| output: true
#| label: tbl-places-categories

places<- full_join(
  trips$origplace1%>%replace_na('NA')%>%table()%>%sort(decreasing=TRUE,na.last=TRUE)%>%as.data.frame()%>%`colnames<-`(c('Place','Origins (n)')),
  trips$destplace1%>%replace_na('NA')%>%table()%>%sort(decreasing=TRUE,na.last=TRUE)%>%as.data.frame()%>%`colnames<-`(c('Place','Destinations (n)'))
  )%>%adorn_totals()
kable(places)
```

In the above, 'Accommodation' may be thought of as 'Home'.

There was one trip record missing an origin category (`origplace1` and `origplace2` both as NA), with destination of Accommodation (i.e. home).  
```{r}
 trips[is.na(trips$origplace1),][c('origplace1','destplace1','origpurp1','destpurp1')]
```

There were coordinates recorded for this record (manual check), and the Vista data contained 'Purpose at Start of Trip Stage (Summary)' (`origpurp1`) as "Work related" and 'Purpose at End of Trip (Summary)' (`destpurp1`) as 'Go home'.  Following the TRADS example, this means, for derived purpose purposes this record would be an NA (i.e. return trip) and for derived full purpose, a home-based work trip. 

As noted above, VISTA also has origin and destination trip purpose summary variables recorded, `origpurp1` and `destpurp1`.  My understanding, beyond the data dictionary definitions in the above paragraph, is that these provide the reason for being at the origin, and the reason for going to the destination.  Hence in the above example, even though the above was an NA for origin (for whatever reason) it is to be interpreted as 'Work'. 

Here are the list of given trip start (origin) and end (destination) purposes:

```{r} 
#| output: true
#| label: tbl-purpose-categories

purpose<- full_join(
  trips$origpurp1%>%replace_na('NA')%>%table()%>%sort(decreasing=TRUE,na.last=TRUE)%>%as.data.frame()%>%`colnames<-`(c('Purpose','Start (n)')),
  trips$destpurp1%>%replace_na('NA')%>%table()%>%sort(decreasing=TRUE,na.last=TRUE)%>%as.data.frame()%>%`colnames<-`(c('Purpose','End (n)'))
  )%>%adorn_totals()
kable(purpose)
```

There were recorded instances of NA for one origin and one destination trip purpose.
```{r}
trips[is.na(trips$origpurp1)|is.na(trips$destpurp1),][c('origplace1','destplace1','origpurp1','destpurp1')]
```
One of these had a recorded origin of 'Transport Feature' (purpose: to 'Pick-up or Drop-off Someone') with destination of Workplace (purpose: NA).  Arguably if you're going into work, that's a work-related trip.  Perhaps there are grey areas (e.g. its your day off and you're picking up the sandwich you left in the fridge), but it would be consistent with TRADS to interpret this as a 'Non-Home Based Work Trip'.

The other is similar: from Workplace (purpose NA) to Place of Education (purpose: Education).  That's a 'Non-home based work' trip' (there isn't a non-home based education trip in the above classification schema, so the choice is easy).

Following this review, and below stated considerations, it was determined to identify MITO purpose using origin and destination places and purposes, as required to approximate the required categories.

### Other considerations

_(following e-mail discussion with Corin 2024-08-31)_
We are interested in recreational round-trips (RRTs), where these involve going for a walk/ride and returning back to the origin without reaching any other destination (e.g., going for a run, walking the dog). 

To better understand where these kind of trips may be being classified in Vista, we can list the distinct categories in the `origpurp2` variables:

```{r}
#| output: true

purpose_detail<- full_join(
  trips$origpurp2%>%replace_na('NA')%>%table()%>%sort(decreasing=TRUE,na.last=TRUE)%>%as.data.frame()%>%`colnames<-`(c('Purpose','Start (n)')),
  trips$destpurp2%>%replace_na('NA')%>%table()%>%sort(decreasing=TRUE,na.last=TRUE)%>%as.data.frame()%>%`colnames<-`(c('Purpose','End (n)'))
  )%>%adorn_totals()
kable(purpose_detail)
```

So, we see 'Walked the dog was cited approximate 3,500 times as a purpose for origin and destination. 

(_incidentally, the purpose category 'Employer's business' likely matches intent of the MITO categories_)

To see how such trips may be referenced using the higher level purpose and place variables, let's explore more:

```{r}
#| output: true
survey$T[survey$T$origpurp2=="Walked the dog","origpurp1"] %>% table()%>%sort(decreasing=TRUE,na.last=TRUE)%>% kable()
```

So, 'walked the dog' is an example of what someone may conduct as 'personal business'

```{r}
#| output: true
survey$T[survey$T$origpurp2=="Walked the dog",c("destpurp2")] %>% table()%>%sort(decreasing=TRUE,na.last=TRUE)%>%as.data.frame()%>%`colnames<-`(c('Purpose','End (n)')) %>%adorn_totals() %>% kable()
```

The most common purpose of someone conducting personal business to walk the dog is to 'Go home' (likely a recreational round trip, but identifying the broader pattern requires further investigation).  Another destination purpose is 'Walked the dog', what are the places associated with such a double coding?

```{r}
#| output: true
 (survey$T %>% filter(survey$T$origpurp2=="Walked the dog" & survey$T$destpurp2=="Walked the dog"))[c("origplace1","destplace2")] %>% table() %>% kable()
```

So, these are examples of walking to some location to walk a dog and presumably, these are middle segments of larger trip chains where people have left home to walk the dog, and subsequently return home from walking the dog.  In other words, these likely are examples of recreational round trips (arguably); how could that be captured, or should it?  Maybe not in the case of someone else's home, but perhaps 'Recreational NEC' is simply walking the dog in the middle of a recreational round trip involving that activity.

I believe (from exploration not recorded here) it hints at the general pattern of recreational round trips where these are recorded across multiple legs of trip IDs, 
e.g.

| Event | tripno|origpurp1         |destpurp1     |origpurp2      |destpurp2 |origplace1         |destplace1    |
|------:|------:|:-----------------|:-------------|:--------------|:---------|:------------------|:-------------|
| Commence RRT |    `j` |**At Home**   |_Personal Business_ |At home   |Walked the dog |Accommodation |**Recreational Place** |
| Return leg of RRT |  `j+1`| _Personal Business_ |**At or Go Home** |Walked the dog |Go home   |**Recreational Place** |Accommodation |

I believe the above is the pattern of an RRT, where there are 

- two consecutive `tripid` within the one persid
- first has `origpurp1`=='At Home', `destpurp1`== 'Personal Business' and `destplace1` of 'Recreational Place'
- second has `origplace1`=='Recreational Place',`origpurp1`== 'Personal Business' and `destpurp1`=='At or Go Home'

This would be expected to be a more general case than simply walking a dog; e.g. going for a walk in general, or a bike ride; i.e. the intent of RRT.  It is plausible that there could be other purposes than personal business this round trip pattern could be classified under.

The high level destination of 'Recreational Place' is too vague (e.g. includes Gym or Racecourses); the lower-level identifier of 'Recrational NEC' is the more useful, and most common one in this scenario -- I believe it implies, a trip for its own recreational purposes.

```{r}
#| output: true
 (survey$T %>% filter(survey$T$origpurp1=='At Home' & survey$T$destplace1=='Recreational Place'))['destplace2'] %>% table() %>% sort(decreasing=TRUE,na.last=TRUE) %>% kable()
```

I am not sure off hand how best to classify this multi-trip paradigm, that is distinct from other single trip classifications, in code. ** @CorinStaves and @Qinnnnn, keen to hear your thoughts on this! **.

### Further trip cleaning prior to assignment, based on above review

To ensure proper coding, `origplace1` will be recorded as work related where origin purpose is 'Work Related' (**for now, pending review with colleagues**)
```{r}
trips[is.na(trips$origplace1) & trips$origpurp1=='Work Related','origplace1'] <- 'Workplace'
```


Also, for now we will replace these respective NA values as 'workplace' (will run this past colleagues later for thoughts on this) to ensure we have the appropriate fields in order to categorise as NHBW, later.
```{r}
trips[is.na(trips$destpurp1) & trips$destplace1=='Workplace','destpurp1'] <- 'Work Related'
trips[is.na(trips$origpurp1) & trips$origplace1=='Workplace','origpurp1'] <- 'Work Related'
```


### Revised origin and destination places, following cleaning:
```{r} 
#| output: true
#| label: tbl-places-categories.cleaned

places<- full_join(
  trips$origplace1%>%replace_na('NA')%>%table()%>%sort(decreasing=TRUE,na.last=TRUE)%>%as.data.frame()%>%`colnames<-`(c('Place','Origins (n)')),
  trips$destplace1%>%replace_na('NA')%>%table()%>%sort(decreasing=TRUE,na.last=TRUE)%>%as.data.frame()%>%`colnames<-`(c('Place','Destinations (n)'))
  )%>%adorn_totals()
kable(places %>% replace(is.na(.), 0)) # NA counts are really zeroes
```

### Revised origin and destination purposes, following cleaning:
```{r} 
#| output: true
#| label: tbl-purpose-categories.cleaned

purpose<- full_join(
  trips$origpurp1%>%replace_na('NA')%>%table()%>%sort(decreasing=TRUE,na.last=TRUE)%>%as.data.frame()%>%`colnames<-`(c('Purpose','Start (n)')),
  trips$destpurp1%>%replace_na('NA')%>%table()%>%sort(decreasing=TRUE,na.last=TRUE)%>%as.data.frame()%>%`colnames<-`(c('Purpose','End (n)'))
  )%>%adorn_totals()
kable(purpose %>% replace(is.na(.), 0)) # NA counts are really zeroes
```

We have now imputed values for the NA places and purposes.

### Assign trip purpose for MITO

_RRT identification, as per considerations listed above, is not yet implemented_

```{r}
trips <- trips %>%   rename(origin=origpurp1, destination=destpurp1)
trips <- trips %>% 
  mutate(
    purpose = case_when(
      origpurp2 == "Employer's Business" | destpurp2 == "Employer's Business" ~ "business",
      origin %in% c("Unknown Purpose (at start of day)", "Not Stated") | 
        destination %in% c("NA", "Not Stated") ~ "unknown",
      origin == "At Home" & destination == "At or Go Home" ~ "RRT",
      origin == "At Home" ~ case_when(
        destination == "Work Related" ~ "HBW",
        destination == "Education" ~ "HBE",
        destination == "Buy Something" ~ "HBS",
        destination == "Recreational" ~ "HBR",
        destination == "Other Purpose" ~ "HBO",
        destination %in% c("Accompany Someone","Pick-up or Drop-off Someone") ~ "HBA",
        # Classify remaining trips using place information if clearer than purpose
        destplace1 == "Workplace" ~ "HBW",
        destplace1 == "Place of Education" ~ "HBE",
        destplace1 == "Shops" ~ "HBS",
        destplace1 %in% c("Recreational Place","Natural Feature", "Social Place") ~ "HBR",
        destplace1 %in% c("Accommodation","Change Mode","Transport Feature", "Other") ~ "HBO"
      ),
      destination == "At or Go Home" ~ "NA",
      origin == "Work Related" | destination == "Work Related" ~ "NHBW",
      TRUE ~ "NHBO"
    ),
    full_purpose = case_when(
        destination %in% c("Unknown Purpose (at start of day)", "Not Stated") | 
          origin %in% c("NA", "Not Stated") ~ "unknown",
        destination == "At Home" & origin == "At or Go Home" ~ "RRT",
        destination == "At Home" ~ case_when(
          origin == "Work Related" ~ "HBW",
          origin == "Education" ~ "HBE",
          origin == "Buy Something" ~ "HBS",
          origin == "Recreational" ~ "HBR",
          origin == "Other Purpose" ~ "HBO",
          origin %in% c("Accompany Someone","Pick-up or Drop-off Someone") ~ "HBA",
          # Classify remaining trips using place information if clearer than purpose
          origplace1 == "Workplace" ~ "HBW",
          origplace1 == "Place of Education" ~ "HBE",
          origplace1 == "Shops" ~ "HBS",
          origplace1 %in% c("Recreational Place","Natural Feature", "Social Place") ~ "HBR",
          origplace1 %in% c("Accommodation","Change Mode","Transport Feature", "Other") ~ "HBO"
        ),
        origin == "At or Go Home" ~ "NA",
        destination == "Work Related" | origin == "Work Related" ~ "NHBW",
      TRUE ~ purpose
    )
  )
```

### Review the assigned trip purposes
```{r}
#| output: true
#| label: tbl-purpose-categories.MITO
purpose.MITO <- trips$purpose %>% 
    replace_na('slipped through cracks') %>%
    table() %>%
    sort(decreasing=TRUE,na.last=TRUE) %>%
    as.data.frame() %>%
    `colnames<-`(c('MITO Purpose','Count')) %>%
    adorn_totals()
kable(purpose.MITO)
```

(_RRT classification method not yet correctly implemented_)

## Attach travel time 
Car and pt travel time are simulated in MATSim using the recorded coordinates/zones of the trip origin and destination

THIS CODE IS NOT CURRENTLY RUN.  Its pending the above analysis being finalised, and {r} being added to the code block to trigger its running.
```
carTravelTime=read_csv("data/melbourne/travelTime/carCongested_10perc.csv")%>%filter(Route=="carCongested")
ptTravelTime=read_csv("data/melbourne/travelTime/ptTravelTime_matsim.csv")

trips = trips%>%
  left_join(carTravelTime[,c("IDNumber","PersonNumber","TripNumber","time","dist")],by=c("hh.id"="IDNumber","p.id"="PersonNumber","t.id"="TripNumber"))%>%
  left_join(ptTravelTime[,c("IDNumber","PersonNumber","TripNumber","totalTravelTime")],by=c("hh.id"="IDNumber","p.id"="PersonNumber","t.id"="TripNumber"))

colnames(trips)[which(names(trips) == "time")] = "carTravelTime_sec"
colnames(trips)[which(names(trips) == "totalTravelTime")]  = "ptTravelTime_sec"

trips$carTravelTime_sec = as.numeric(trips$carTravelTime_sec)
trips$ptTravelTime_sec = as.numeric(trips$ptTravelTime_sec)
trips$dist = as.numeric(trips$dist)
```
## Filter out invalid trips records 
CODE NOT CURRENTLY IMPLEMENTED PENDING ABOVE (needs {r} added to codeblock)

```
# 1. filter out trips origin/destination outside Boundary (after filtering 30044 trips) 
# The boundary is defined as 10 km over the study area and the full coverage of the spatial attributes 
trips = trips%>%
  left_join(carTravelTime[,c("IDNumber","PersonNumber","TripNumber","OriginWithinBoundary","DestinationWithinBoundary","SameOrigAndDest")],
            by=c("hh.id"="IDNumber","p.id"="PersonNumber","t.id"="TripNumber"))

trips = trips%>%
  filter(OriginWithinBoundary&DestinationWithinBoundary=="true")

# 2. filter out trips with mode "Other" or "unknown" (after filtering 29932)
trips = trips%>%
  filter(!t.m_main_agg%in%c("Other","unknown"))

# 3. filter out trips with purpose "RRT", "business", and "unknown" and "return home" (after filtering 27952)
trips = trips%>%
  filter(!t.purpose%in%c("RRT","unknown","business"))
```
## Deal with intrazonal trips
For Manchester there were a substantial number of intrazonal trips, having origin and destination are recorded with the same output area (OA).

For Melbourne, we need to check if intrazonal trips exist, sharing identical origin and destination coordinates.

CODE NOT CURRENTLY IMPLEMENTED PENDING ABOVE (needs {r} added to codeblock)

```
# Estimate distance-dependent speed of car and pt
averageSpeed = trips%>%
  filter(SameOrigAndDest == "false" & dist != 0 & carTravelTime_sec != 0 & ptTravelTime_sec != 0)%>%
  mutate(speed_car = as.numeric(dist)/carTravelTime_sec,
         speed_pt = as.numeric(dist)/ptTravelTime_sec)

lm_carSpeed=lm(speed_car ~ as.numeric(dist),averageSpeed)
summary(lm_carSpeed)
lm_ptSpeed=lm(speed_pt ~ sqrt(as.numeric(dist)),averageSpeed)
summary(lm_ptSpeed)


# Use reported trip length to impute travel time of alternative modes,
# If reported trip length == 0, then use reported travel time to impute travel time of alternative modes

intrazonalTrips=trips[trips$SameOrigAndDest=="true",]


intrazonalTrips=intrazonalTrips %>% 
  within({ dist = case_when(t.tripLength > 0 ~ t.tripLength * 1.2,
                            t.tripLength == 0 ~ case_when(t.m_main_agg == "Walk" ~ t.travelTime * (4.0/3.6), #average walk speed 4km/h
                                                          t.m_main_agg == "Bike" ~ t.travelTime * (12.5/3.6), #average cycle speed 4km/h
                                                          t.m_main_agg == "Car" ~ t.travelTime * (30.0/3.6), #average car speed 30 km/h
                                                          t.m_main_agg == "Pt" ~ t.travelTime * (6.0/3.6)))}) #average pt speed km/h


intrazonalTrips=intrazonalTrips%>%
  mutate(carSpeed_impute = predict(lm_carSpeed,intrazonalTrips),
         ptSpeed_impute = predict(lm_ptSpeed,intrazonalTrips),
         carTravelTime_sec = dist/carSpeed_impute,
         ptTravelTime_sec = dist/ptSpeed_impute)


trips = trips%>%
  rows_update(intrazonalTrips%>% 
                select(-carSpeed_impute, -ptSpeed_impute),by="t.ID")

```
## Write to CSV

CODE NOT CURRENTLY IMPLEMENTED PENDING ABOVE (needs {r} added to codeblock)

```
# Get today's date
today <- format(Sys.Date(), "%Y_%m_%d")

# Add today's date as a suffix to the filename
filename <- paste0("trips_Melbourne_JIBE_", today, ".csv")

# Write to CSV with the updated filename
write.csv(trips, file = filename, row.names = FALSE)
```


## System information for the above analysis

The following information records the version of R used for this analysis:
```{r}
#| output: true
sessionInfo()
```



[^1]: Victorian Government Department of Transport. 2022. Victorian Integrated Survey of Travel and Activity 2012-2020. https://www.vic.gov.au/victorian-integrated-survey-travel-and-activity
[^2]: Ortúzar JdD and Willumsen LG (2011) Modelling Transport. Chichester: John Wiley & Sons, Ltd
[^3]: Staves, Corin. (2020). Physical Activity Assessment and Modelling using Household Travel Surveys. 10.13140/RG.2.2.14307.84009. 
[^4]: Staves C, Zhang Q, Moeckel R, et al. (2023) Integrating health effects within an agent-based land use and transport model. J Transp Health 33: 101707.
